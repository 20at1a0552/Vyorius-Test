1.Imports:
import cv2
import numpy as np
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
cv2: OpenCV library for image and video processing.
numpy: Library for numerical computing.
MobileNetV2: Pre-trained model for object detection.
preprocess_input: Function to preprocess input images for the MobileNetV2 model.
2.Loading Pre-trained Model:
model = MobileNetV2(weights='imagenet', include_top=True)
Loads the pre-trained MobileNetV2 model with weights trained on the ImageNet dataset.
3.Object Detection Function:
def detect_objects(frame):
    processed_frame = cv2.resize(frame, (224, 224))
    processed_frame = preprocess_input(processed_frame)
    processed_frame = np.expand_dims(processed_frame, axis=0)
    predictions = model.predict(processed_frame)
    return predictions
This function takes a frame as input, preprocesses it, and passes it through the MobileNetV2 model for object detection.
It returns the predictions made by the model.
4.Anomaly Scoring Function:
def calculate_anomaly_score(object_info):
    anomaly_score = np.random.random()
    return anomaly_score
This function calculates an anomaly score based on the detected objects.
For demonstration purposes, it generates a random score between 0 and 1.
5.Drawing Bounding Boxes Function:
def draw_boxes(frame, object_info, anomaly_score):
    cv2.putText(frame, f'Anomaly Score: {anomaly_score}', (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    return frame
This function draws bounding boxes and anomaly indicators on the frame.
For demonstration purposes, it simply prints the anomaly score on the frame.
6.Establishing Baseline Function:
def establish_baseline(video_path):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error opening video stream or file")
        return None
    baseline_frame = None
    num_frames = 50
    count = 0
    while cap.isOpened() and count < num_frames:
        ret, frame = cap.read()
        if not ret:
            break
        if baseline_frame is None:
            baseline_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        else:
            baseline_frame = cv2.addWeighted(baseline_frame, 0.9, cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY), 0.1, 0)
        count += 1
    cap.release()
    return baseline_frame
This function establishes a baseline for normal activity using background subtraction.
It captures the video stream and processes the first few frames to create the baseline.
Returns the baseline frame.
7.Main Function for Video Stream Analysis:
def analyze_video_stream(video_path, baseline_frame):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("Error opening video stream or file")
        return
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        diff = cv2.absdiff(frame_gray, baseline_frame)
        _, mask = cv2.threshold(diff, 30, 255, cv2.THRESH_BINARY)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, np.ones((5,5),np.uint8))
        object_info = detect_objects(frame)
        anomaly_score = calculate_anomaly_score(object_info)
        frame_with_boxes = draw_boxes(frame, object_info, anomaly_score)
        cv2.imshow('Video Stream', frame_with_boxes)
        if cv2.waitKey(1) & 0xFF == ord('q'):This is the main function for analyzing the video stream.
It captures the video stream and processes each frame.
Calculates the absolute difference between the current frame and the baseline frame.
Detects objects in the frame, calculates anomaly scores, and draws bounding boxes.
Displays the frame with bounding boxes and anomaly indicators.
            break
    cap.release()
    cv2.destroyAllWindows()

8.Trigger Alert Function:
def trigger_alert(anomaly_score, threshold=0.5):
    if anomaly_score > threshold:
        print("Alert: Anomaly Detected!")
This function triggers alerts based on anomaly thresholds.
If the anomaly score exceeds a predefined threshold, it prints an alert message.
9.Running the Program:
if __name__ == "__main__":
    video_path = "C:\\Users\\vihar\\Dropbox\\My PC (LAPTOP-1FLQ6SIH)\\Pictures\\Camera Roll\\indhu self introduction.mp4"
    baseline_frame = establish_baseline(video_path)
    analyze_video_stream(video_path, baseline_frame)

